<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>原创：命令行备忘录 cheat 的安装与配置</title>
    <url>/2020/04/23/post-2-yc/</url>
    <content><![CDATA[<p>对于经常使用命令行的人来说，记忆那些很长很复杂但又经常用到的命令行指令无疑是一件令人痛苦的事情，因此有时候我们希望能有那样一个工具，来帮助我们记忆这些指令，以减轻我们记忆上的负担。</p>
<p>对于这个问题，一种解决办法是将这些指令统一记录在一个文档中，当你忘记了某个指令时，再打开这个文档进行查找；随着文档中记录的指令不断增加，你可能会想要将这些指令分开到不同的文档中，并给这些文档起一个对应的名字，就比如git、vim、diff等，并且你很可能会将这些文档放在同一个文件夹中以便于统一管理。那么具体怎么操作呢？</p>
<a id="more"></a>
<p>我想可以这样来进行：假设你现在已经有了一个存放着各种指令文档的文件夹<code>C:\Users\惠普\Desktop\cheatsheets</code>，当你忘记了某个指令时，你可以执行以下命令来查找你所需要的指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; cd C:\Users\惠普\Desktop\cheatsheets	<span class="comment"># 切换到存放有备忘录的文件夹</span></span><br><span class="line">&gt; cat git	<span class="comment"># 将文件git中的内容输出到终端</span></span><br><span class="line"><span class="comment"># To set your identity:</span></span><br><span class="line">git config -<span class="literal">-global</span> user.name &lt;name&gt;</span><br><span class="line">git config -<span class="literal">-global</span> user.email &lt;email&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># To set your editor:</span></span><br><span class="line">git config -<span class="literal">-global</span> core.editor &lt;editor&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>当然，为了提高效率，你还可以创建一个变量<code>$cheat</code>来存放该文件夹的路径，并将其放入Windows PowerShell的配置文件中<code>$PROFILE.CurrentUserAllHosts</code>，这样就可以更加方便的查找我们所需要的指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; cat <span class="variable">$cheat</span>\git</span><br></pre></td></tr></table></figure>
<p>说到这里，你可能已经想要自己实现一个这样的软件，来更好的管理这些备忘录了，但我们无需这么做，虽然那将会很有趣，因为已经有人实现了这样的一个软件，那个软件就是<strong>cheat</strong>，该项目开源在GitHub上，这是该项目的地址 https://github.com/cheat/cheat。</p>
<p>我在这篇文章中将向你们讲述这个软件在Windows系统上的安装与配置的过程，因为在Windows系统中安装这个软件并不是那么方便的。</p>
<hr />
<p><strong>1、</strong>在cheat的下载地址 https://github.com/cheat/cheat/releases 下载Windows版本的cheat：</p>
<p><img data-src="1.png" /></p>
<p><strong>2、</strong>将解压后的文件夹放入任意一个磁盘，此时，你可以选择重命名该文件夹，就比如<code>cheat</code>，然后将子文件夹<code>dist</code>中的二进制文件<code>cheat-windows-amd64.exe</code>重命名为<code>cheat.exe</code>，然后你也可以选择给它换个地方：</p>
<p><img data-src="2.png" /></p>
<p><strong>3、</strong>将该可执行文件<code>cheat.exe</code>的路径添加进环境变量中，这样你就可以在命令行下使用该软件了，具体步骤就不在此处赘述了。</p>
<p><strong>4、</strong>==手动==创建一个配置文件，你可以在命令行下执行如下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; cd D:\cheat</span><br><span class="line">&gt; cheat -<span class="literal">-init</span> &gt; conf.yml	<span class="comment"># 初始化一个配置文件并将其重定向到文件D:\cheat\conf.yml中</span></span><br></pre></td></tr></table></figure>
<p><strong>5、</strong>创建一个环境变量来指定该配置文件的路径，在运行cheat时，cheat将会根据该路径寻找配置文件，若找到，则将加载该配置文件，其中环境变量的名字必须为<code>CHEAT_CONFIG_PATH</code>，值则为你刚刚创建的配置文件的路径：</p>
<p><img data-src="3.png" /></p>
<p><strong>6、</strong>接下来，你需要创建一个文件夹<code>cheatsheets</code>来存放备忘录，备忘录分为两种，一种是社区(community)提供的，另一种则是用户自己(personal)创建的，因此你还需要在文件夹<code>cheatsheets</code>下创建两个子文件夹<code>community</code>和<code>personal</code>，然后你可以选择将文件夹<code>cheatsheets</code>放在文件系统中的任何一个位置，当然，为了方便管理，你最好将其与<code>cheat.exe</code>和<code>conf.yml</code>放在一起：</p>
<p><img data-src="4.png" /></p>
<p><strong>7、</strong>打开配置文件<code>conf.yml</code>，下拉到文件底部，将与<code>community</code>所对应的<code>path</code>的值设置为你刚刚创建的<code>community</code>文件夹的路径，同样地，将与<code>personal</code>对应的<code>path</code>的值设置为<code>personal</code>文件夹的路径：</p>
<p><img data-src="5.png" /></p>
<blockquote>
<p>注意：<code>path:</code>与其后面的值(路径)之间必须要留一个空格</p>
</blockquote>
<p><strong>8、</strong>至此，cheat已经可以正常使用了，但是，此时你的<code>cheatsheets</code>文件夹中还没有任何一个备忘录，你可以选择创建一个自己的备忘录，并将其放入子文件夹<code>personal</code>中，也可以选择暂时使用社区提供的备忘录。如果你打算创建一个自己的备忘录，你应该遵循cheat的文档中给你的<a href="https://github.com/cheat/cheat" target="_blank" rel="noopener">指导</a>；如果你打算暂时使用社区提供的备忘录，则需要自己手动下载它们，下面将给出下载方法。</p>
<p><strong>9、</strong> 你可以在这里下载社区提供的备忘录 https://github.com/cheat/cheatsheets：</p>
<p><img data-src="6.png" /></p>
<p>单击图中的<code>Download ZIP</code>，将所有社区提供的备忘录下载到本地，解压缩后，将文件夹中的所有的备忘录移动到目录<code>...\cheatsheets\community</code>中，你可以选择将其中的文件夹<code>.github</code>删除，也可以留着；此时，打开cmd或者Windows PowerShell，在其中执行命令<code>cheat git</code>，你将会看到如下输出：</p>
<p><img data-src="7.png" /></p>
<blockquote>
<p>注：你也可以使用git将整个仓库克隆到文件夹<code>community</code>中，以后当该仓库有更新时，可以方便的通过<code>git pull</code>来对该文件夹下的备忘录进行更新；此外，如果你觉得你并不需要所有这些社区提供的备忘录，比如你只想要备忘录<code>git</code>，你也可以选择只下载该文件，然后将其放入文件夹<code>community</code>中</p>
</blockquote>
<hr />
<p><strong>说在最后</strong>：除了<strong>cheat</strong>，你也可以试一试另一个命令行备忘录工具<strong>navi</strong>，该工具给我们提供了一个交互式的命令行界面，你可以浏览备忘录并执行其中的命令，而不是将备忘录中的所有内容直接输出到终端，同样地，navi开源在GitHub上，这是仓库地址 https://github.com/denisidoro/navi；遗憾的是，navi并没有提供Windows可执行文件，目前，你只能在*nix系统以及mac系统上使用该软件。</p>
<p>此外，你还可以试一试命令行下的模糊查找工具<strong>fzf</strong>，该软件可以与cheat整合，使得cheat能提供更强大的功能，这是仓库地址 https://github.com/junegunn/fzf。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>命令行</tag>
        <tag>备忘录</tag>
        <tag>Windows</tag>
        <tag>Windows PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>转载：数字签名是什么？</title>
    <url>/2020/04/23/post-1-zz/</url>
    <content><![CDATA[<p>本文转载自 <a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">数字签名是什么？ - 阮一峰的网络日志</a></p>
<hr />
<p>今天，我读到一篇<a href="http://www.youdzone.com/signature.html" target="_blank" rel="noopener">好文章</a>。</p>
<p>它用图片通俗易懂地解释了，"数字签名"（digital signature）和"数字证书"（digital certificate）到底是什么。</p>
<p>我对这些问题的理解，一直是模模糊糊的，很多细节搞不清楚。读完这篇文章后，发现思路一下子就理清了。为了加深记忆，我把文字和图片都翻译出来了。</p>
<p>文中涉及的密码学基本知识，可以参见我以前的<a href="http://www.ruanyifeng.com/blog/2006/12/notes_on_cryptography.html" target="_blank" rel="noopener">笔记</a>。</p>
<a id="more"></a>
<hr />
<h1 id="数字签名是什么">数字签名是什么？</h1>
<p>作者：David Youd</p>
<p>翻译：阮一峰</p>
<p>原文网址：http://www.youdzone.com/signature.html</p>
<ol type="1">
<li></li>
</ol>
<figure>
<img data-src="1.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>鲍勃有两把钥匙，一把是公钥，另一把是私钥。</p>
<ol start="2" type="1">
<li></li>
</ol>
<figure>
<img data-src="2.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>鲍勃把公钥送给他的朋友们----帕蒂、道格、苏珊----每人一把。</p>
<ol start="3" type="1">
<li></li>
</ol>
<figure>
<img data-src="3.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。</p>
<ol start="4" type="1">
<li></li>
</ol>
<figure>
<img data-src="4.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。</p>
<ol start="5" type="1">
<li></li>
</ol>
<figure>
<img data-src="5.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>鲍勃给苏珊回信，决定采用"数字签名"。他写完后先用Hash函数，生成信件的摘要（digest）。</p>
<ol start="6" type="1">
<li></li>
</ol>
<figure>
<img data-src="6.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>然后，鲍勃使用私钥，对这个摘要加密，生成"数字签名"（signature）。</p>
<ol start="7" type="1">
<li></li>
</ol>
<figure>
<img data-src="7.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>鲍勃将这个签名，附在信件下面，一起发给苏珊。</p>
<ol start="8" type="1">
<li></li>
</ol>
<figure>
<img data-src="8.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。</p>
<ol start="9" type="1">
<li></li>
</ol>
<figure>
<img data-src="9.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。</p>
<ol start="10" type="1">
<li></li>
</ol>
<figure>
<img data-src="10.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成"数字签名"，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。</p>
<ol start="11" type="1">
<li></li>
</ol>
<figure>
<img data-src="11.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找"证书中心"（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成"数字证书"（Digital Certificate）。</p>
<ol start="12" type="1">
<li></li>
</ol>
<figure>
<img data-src="12.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。</p>
<ol start="13" type="1">
<li></li>
</ol>
<figure>
<img data-src="13.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明"数字签名"是否真的是鲍勃签的。</p>
<ol start="14" type="1">
<li></li>
</ol>
<figure>
<img data-src="14.jpg" alt="" /><figcaption>img</figcaption>
</figure>
<p>下面，我们看一个应用"数字证书"的实例：https协议。这个协议主要用于网页加密。</p>
<ol start="15" type="1">
<li></li>
</ol>
<figure>
<img data-src="15.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>首先，客户端向服务器发出加密请求。</p>
<ol start="16" type="1">
<li></li>
</ol>
<figure>
<img data-src="16.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。</p>
<ol start="17" type="1">
<li></li>
</ol>
<figure>
<img data-src="17.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>客户端（浏览器）的"证书管理器"，有"受信任的根证书颁发机构"列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。</p>
<ol start="18" type="1">
<li></li>
</ol>
<figure>
<img data-src="18.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。</p>
<ol start="19" type="1">
<li></li>
</ol>
<figure>
<img data-src="19.jpg" alt="" /><figcaption>img</figcaption>
</figure>
<p>如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。</p>
<ol start="20" type="1">
<li></li>
</ol>
<figure>
<img data-src="20.png" alt="" /><figcaption>img</figcaption>
</figure>
<p>如果数字证书是可靠的，客户端就可以使用证书中的服务器公钥，对信息进行加密，然后与服务器交换加密信息。</p>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>数字签名</tag>
        <tag>数字证书</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>404</title>
    <url>/404/index.html</url>
    <content><![CDATA[<center>
您访问的页面走失了，刷新试一试吧~
</center>
<script src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"
        charset="utf-8" homePageUrl="/" homePageName="返回首页">
</script>
]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>关于</title>
    <url>/about/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
</search>
